{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Template to build AWS account credit tracking stack",
  "Parameters" : {
    "SNSNotificationTopicName": {
      "Type": "String",
      "Description": "SNS Topic to receive alarm notification when utilization threshold is reached",
      "Default": "aws-credits-status"
    },
    "SNSNotificationEmail": {
      "Type": "String",
      "Description": "Email address for utilization threshold alert notification",
      "Default": "abrodjeski@deloitte.com"
    },
    "CreditsTableName" : {
      "Type" : "String",
      "Description" : "Name of DynamoDB table containing credit parameters",
      "Default" : "aws-credit-status"
    },
    "CreditsAwardName" : {
       "Type" : "String",
       "Description" : "Name of credit award",
       "Default" : "Q2 T&C Promo Credits- 300 Deloitte"
    },
    "CreditEffectiveDate" : {
      "Type" : "String",
      "Description" : "Effective date to apply credits",
      "Default" : "2022-09-01"
    },
    "CreditExpiry" : {
      "Type" : "String",
      "Description" : "Expiration date to apply credits",
      "Default" : "2023-01-31"
    },
    "CreditLimit" : {
      "Type" : "Number",
      "Description" : "Number of credits",
      "Default" : "300.0"
    },
    "CreditAccumulated" : {
      "Type" : "Number",
      "Description" : "Credits used in previous full months",
      "Default" : 0
    },
    "CreditCurrent" : {
      "Type" : "Number",
      "Description" : "Credits used in current month",
      "Default" : 0.0
    },
    "AlertThreshold" : {
      "Type" : "Number",
      "Description" : "Percentage of total credits used to trigger alert. A 0.0 percentage will always send an alert",
      "Default" : "0.0"
    },
    "LambdaEventTriggerRateValue": {
      "Type": "Number",
      "Description": "A positive number for unit of time between credit Lambda execution runs",
      "Default": 30
    },
    "LambdaEventTriggerRateUnit": {
      "Type": "String",
      "Description": "Unit of time for triggering credit Lambda function. (Different units are required for value of 1, e.g., 'minute' instead of 'minutes'",
      "Default": "minutes"
    },
    "LambdaEventTriggerCron": {
      "Type": "String",
      "Description": "Cron string to configure event triggering",
      "Default": "cron(0 16 * * ? *)"
    }
  },
  "Resources" : {
    "CreditsTable" : {
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
          "AttributeDefinitions" : [ {
            "AttributeName" : "credit_name",
            "AttributeType" : "S"
          }
           ],
          "BillingMode" : "PAY_PER_REQUEST",
          "KeySchema" : [ {
            "AttributeName" : "credit_name",
            "KeyType" : "HASH"
            } 
          ],
          "PointInTimeRecoverySpecification" : {
            "PointInTimeRecoveryEnabled" : true
          },          
          "TableName" : { "Ref" : "CreditsTableName" },
          "Tags" : [ { "Key" : "Project",
                       "Value" : "AWS Sandbox"
                      } 
                  ]
        }
    },
    "AlarmAlertTargetSNS": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
          "DisplayName": "AWS Credits Utilization Notification",
          "TopicName": {
              "Ref": "SNSNotificationTopicName"
          }
      }
    },
    "AlarmSNSSubscription": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
          "Endpoint": {
              "Ref": "SNSNotificationEmail"
          },
          "Protocol": "email",
          "TopicArn": {
              "Ref": "AlarmAlertTargetSNS"
          }
      }
    },
    "InitializeCreditTable" : {
      "Type" : "AWS::CloudFormation::CustomResource",
      "DependsOn" : "CreditsTable",
      "Properties" : {
        "TableName" : { "Ref" : "CreditsTableName" },
        "ServiceToken" : { "Fn::GetAtt" : ["CreditsTableLambdaInitializer", "Arn"] },
        "NameField" : { "Ref" : "CreditsAwardName"},
        "EffectiveDate" : { "Ref" : "CreditEffectiveDate" },
        "ExpiryDate" : { "Ref" : "CreditExpiry"},
        "CreditLimit" : { "Ref" : "CreditLimit" },
        "AccumulatedCredit" : { "Ref" : "CreditAccumulated"},
        "CurrentCredit" : { "Ref" : "CreditCurrent"},
        "AlertThreshold" : { "Ref" : "AlertThreshold" },
        "AlertNotificationTopic" : { "Ref" : "AlarmAlertTargetSNS" }
      }
    },
    "AWSCreditsTrackingCustomPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
          "Description": "Policy allowing Lambda function to call Cost Explorer and access DynamoDB",
          "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                  {
                    "Sid": "VisualEditor0",
                    "Effect": "Allow",
                    "Action": [
                        "sns:Publish",
                        "dynamodb:GetItem",
                        "ce:GetCostAndUsage",
                        "dynamodb:UpdateItem"
                    ],
                    "Resource": "*"
                  }
              ]
          }
      }
    },
    "CreditTrackingLambdaRole": {
    "Type": "AWS::IAM::Role",
    "Properties": {
        "RoleName": "CreditTrackingTLambdaRole",
        "Description": "Role to execute Lambda function to query Cost Explorer Server, calculate credits used, and send notification",
        "ManagedPolicyArns": [
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
            { "Ref" : "AWSCreditsTrackingCustomPolicy"} 
        ],
        "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "lambda.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                }
            ]
        }
    }
    },
    "CreditTrackingTableInitializerLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
          "RoleName": "CreditTrackingTableInitializerLambdaRole",
          "Description": "Role to execute Lambda function to initialize credit tracking table",
          "ManagedPolicyArns": [
              "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
          ],
        "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "lambda.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                }
            ]
        }
    }
    },
    "CreditsTableLambdaInitializer" : {
        "Type" : "AWS::Lambda::Function",
        "Properties" : {
        "Description" : "Lambda function to populate credits table with one record",
        "Role" : { "Fn::GetAtt" : ["CreditTrackingTableInitializerLambdaRole", "Arn"] },
        "FunctionName" : "aws_credit_table_initializer",
        "Handler" : "index.lambda_handler",
        "Runtime" : "python3.8",
        "Code" : { "ZipFile" : { "Fn::Join" : ["\n", [
"#MIT License",
"#",
"#Copyright (c) 2022 Allen Brodjeski",
"#",
"#Permission is hereby granted, free of charge, to any person obtaining a copy",
"#of this software and associated documentation files (the \"Software\"), to deal",
"#in the Software without restriction, including without limitation the rights",
"#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
"#copies of the Software, and to permit persons to whom the Software is",
"#furnished to do so, subject to the following conditions:",
"#",
"#The above copyright notice and this permission notice shall be included in all",
"#copies or substantial portions of the Software.",
"#",
"#THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
"#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
"#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
"#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
"#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
"#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
"#SOFTWARE.",                                
"import json",
"import urllib.request",
"import boto3",
"##############################################################",            
"from botocore.exceptions import ClientError",
"",            
"def lambda_handler(event, context):",
"   print( 'Initializing DynamoDB table')",
                
"   print( json.dumps( event ) )",
          
"   print( context )",
          
"   request_type = event['RequestType']",
"   response_url = event['ResponseURL']",
"   properties = event['ResourceProperties']",
          
"   logical_resource_id = event['LogicalResourceId']",
"   resource_properties = event['ResourceProperties']",
      
"   if request_type == 'Create':",    
"       responseData = {}",
"       responseData['Status'] = 'SUCCESS'",
"       responseData['Reason'] = 'SUCCESS'",
"       responseData['PhysicalResourceId'] = 'InitializedTable'",
"       responseData['StackId'] = event['StackId']",
"       responseData['RequestId'] = event['RequestId']",
"       responseData['LogicalResourceId'] = logical_resource_id",
          
"       try:",
"           ddb_client = boto3.client( 'dynamodb' )",
      
"           print( properties['NameField'] )",
"           print( properties['EffectiveDate'] )",
"           print( properties['ExpiryDate'] )",
"           print( properties['CreditLimit'] )",
"           print( properties['AccumulatedCredit'] )",
"           print( properties['AlertThreshold'] )",
"           print( properties['AlertNotificationTopic'] )",
      
"           response = ddb_client.put_item( ",
"                                  TableName=properties['TableName'],",
"                                  Item = {",
"                                  'credit_name' : {'S' : properties['NameField'] },",
"                                  'credit_start' : { 'S' : properties['EffectiveDate'] },",
"                                  'credit_expiry' : { 'S' : properties['ExpiryDate'] },",
"                                  'credit_limit' : {'N' : str( properties['CreditLimit'] )},",
"                                  'credit_accumulated' : { 'N' : str( properties['AccumulatedCredit'] ) },",
"                                  'credit_threshold' : { 'N' : str( properties['AlertThreshold'] ) },",
"                                  'credit_notification_topic' : { 'S' : properties['AlertNotificationTopic'] }",
"                                         }",
"                                         )",
"           print( response )",
"       except ClientError as e:",
"           print( e )",
"           responseData['Status'] = 'FAILED'",
"           responseData['Reason'] = e.response['Error']['Message']",
"",                      
"       json_response = json.dumps(responseData)",
"",            
"       headers = { 'Accept': '',",
"                   'content-length' : str( len( json_response ) )",
"                 }",
"       print('SENDING RESPONSE')",
"       print(json_response)",
"       try:",
"           print( 'Response URL = ' + response_url)",
"           response = urllib.request.urlopen(urllib.request.Request(",
"                                                            url=response_url,",
"                                                            data=bytes(json_response, 'utf-8'),",
"                                                            method='PUT'",
"                                                          ),",
"                                                         timeout=5",
"                                             )",     
"       except Exception as e:",
"           print('send failed executing urllib.request: {e}')",
"#############################################################################################",                  
"   elif request_type == 'Update':",
"# Do nothing ",
"      responseData = {}",
"      responseData['Status'] = 'SUCCESS'",
"      responseData['Reason'] = 'SUCCESS'",
"      responseData['PhysicalResourceId'] = 'InitializedTable'",
"      responseData['StackId'] = event['StackId']",
"      responseData['RequestId'] = event['RequestId']",
"      responseData['LogicalResourceId'] = logical_resource_id",
            
"      json_response = json.dumps(responseData)",
"",            
"      headers = { 'Accept': '',",
"                  'content-length' : str( len( json_response ) )",
"                }",
"      try:", 
"        response = urllib.request.urlopen(urllib.request.Request(",
"                                                                 url=response_url,",
"                                                                 data=bytes(json_response, 'utf-8'),",
"                                                                method='PUT'",
"                                                                ),",
"                                                 timeout=5",
"                                                )",
"      except Exception as e:",
"        print('send failed executing urllib.request: {e}')",
"##############################################################################################################",            
"   elif request_type == 'Delete':",
"#Do nothing",
"      responseData = {}",
"      responseData['Status'] = 'SUCCESS'",
"      responseData['Reason'] = 'SUCCESS'",
"      responseData['PhysicalResourceId'] = 'InitializedTable'",
"      responseData['StackId'] = event['StackId']",
"      responseData['RequestId'] = event['RequestId']",
"      responseData['LogicalResourceId'] = logical_resource_id",
"      json_response = json.dumps(responseData)",
"",           
"      headers = { 'Accept': '',",
"                  'content-length' : str( len( json_response ) )",
"                }",
"      try:",
"        response = urllib.request.urlopen(urllib.request.Request(",
"                                                                 url=response_url,",
"                                                                 data=bytes(json_response, 'utf-8'),",
"                                                                 method='PUT'",
"                                                                ),",
"                                                    timeout=5",
"                                         )",
"      except Exception as e:",
"        print('send failed executing urllib.request: {e}')",
"   return responseData"
                  ]]}
          }
        }
    },
    "CreditsTableLambdaTracker" : {
    "Type" : "AWS::Lambda::Function",
    "Properties" : {
    "Description" : "Lambda function to query Cost Explorer API, sum up credits used and send notification if threshold is reached",
    "Role" : { "Fn::GetAtt" : ["CreditTrackingLambdaRole", "Arn"] },
    "FunctionName" : "aws_credit_tracker",
    "Handler" : "index.lambda_handler",
    "Runtime" : "python3.8",
    "Environment" : {
       "Variables" : { "AWS_CREDITS_NAME" : { "Ref": "CreditsAwardName"}
      }
    },
    "Code" : { "ZipFile" : { "Fn::Join" : ["\n", [
      "#MIT License",
      "#",
      "#Copyright (c) 2022 Allen Brodjeski",
      "#",
      "#Permission is hereby granted, free of charge, to any person obtaining a copy",
      "#of this software and associated documentation files (the \"Software\"), to deal",
      "#in the Software without restriction, including without limitation the rights",
      "#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
      "#copies of the Software, and to permit persons to whom the Software is",
      "#furnished to do so, subject to the following conditions:",
      "#",
      "#The above copyright notice and this permission notice shall be included in all",
      "#copies or substantial portions of the Software.",
      "#",
      "#THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
      "#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
      "#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
      "#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
      "#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
      "#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
      "#SOFTWARE.",                                
      "import os",
      "import json",
      "import boto3",
      "import json",
      "from decimal import Decimal",
      "from datetime import datetime",
      "from botocore.exceptions import ClientError",
      "",
      "#################################",
      "# Global Variables",
      "#",
      "AWS_CREDITS_NAME = os.environ['AWS_CREDITS_NAME']",
      "class Credit:",
      "",
      "  def __init__( self, credit_name ):",
      "    print( 'Building Credit from DynamoDB')",
      "    self.ddb_client = boto3.client( 'dynamodb' )",
      "    self.credit_current = 0",
      "    self.credit_start = ''",
      "    self.credit_expiry = ''",
      "    self.credit_accumulated = 0",
      "    self.credit_threshold = 0",
      "    self.credit_limit = 0",
      "    self.credit_notification_topic = ''",
      "",    
      "    print( 'Credit Name: ' + credit_name)",
      "    try:",    
      "      response = self.ddb_client.get_item(",
      "                  TableName='aws-credit-status',",
      "                    Key= { 'credit_name' : { 'S' : credit_name }},",
      "                    AttributesToGet=['credit_start',",
      "                                     'credit_expiry',",
      "                                     'credit_limit',",
      "                                     'credit_accumulated',",
      "                                     'credit_threshold',",
      "                                     'credit_notification_topic'",
      "                                     ]",
      "                 )",
      "      self.credit_start = response['Item']['credit_start']['S']",
      "      self.credit_expiry = response['Item']['credit_expiry']['S']",
      "      self.credit_limit = float( response['Item']['credit_limit']['N'] )",
      "      self.credit_accumulated = float( response['Item']['credit_accumulated']['N'] )",
      "      self.credit_threshold = float( response['Item']['credit_threshold']['N'] )",
      "      self.credit_notification_topic = response['Item']['credit_notification_topic']['S']",
      "",      
      "      print( self )",
      "",      
      "    except ClientError as e:",
      "        print(e.response['Error']['Message'])",
      "    else:",
      "        print( response )",
      "###################",    
      "  def update_credit_current( self, current_credit ):",
      "    print( 'current credit: ' + current_credit )",
      "    response = self.ddb_client.update_item(",
      "                          TableName='aws-credit-status',",
      "                          Key={",
      "                            'credit_name' : { 'S' :  AWS_CREDITS_NAME }",
      "                          },",
      "                          UpdateExpression = \"set credit_current = :c\",",
      "                          ExpressionAttributeValues={",
      "                            ':c' : {'N' : current_credit  }",
      "                          }",
      "                        )",
      "    print( response )",
      "    return response",
      "#####################",
      "def lambda_handler(event, context):",
      "",
      "  total_cost = 0.0",
      "",  
      "  credit_table = Credit( AWS_CREDITS_NAME )",
      "",
      "  cost_client = boto3.client('ce' )",
      "",
      "  account_id = boto3.client('sts').get_caller_identity().get('Account')",
      "  today = datetime.today().strftime('%Y-%m-%d')",
      "  print( today )",
      "  print( 'Start time: ' + credit_table.credit_start )",
      "  response = cost_client.get_cost_and_usage(",
      "    TimePeriod={",
      "        'Start' : credit_table.credit_start,",
      "        'End' : today",
      "    },",
      "    Granularity='DAILY',",
      "    Filter={",
      "      'Dimensions' : {",
      "      'Key' : 'RECORD_TYPE',",
      "      'Values' : ['Credit'],",
      "      'MatchOptions' : ['EQUALS']",
      "    }",
      "    },",
      "    Metrics=['UnblendedCost']",
      "  )",
      "",
      "  print( response )",
      "",
      "  for credit in response['ResultsByTime']:",
      "#    print( credit['Total']['UnblendedCost']['Amount'] )",
      "    total_cost += float( credit['Total']['UnblendedCost']['Amount'] )",
      "    credit_current = float( credit['Total']['UnblendedCost']['Amount'] )",
      "",  
      "  response = credit_table.update_credit_current( str( credit_current ) )",
      "",
      "  print( total_cost )",
      "  credit_remaining = credit_table.credit_limit + total_cost",
      "",  
      "  print( 'Credit threshold: ' + str( credit_table.credit_threshold ) )",
      "  utilization = total_cost / credit_table.credit_limit * -100.0",
      "",
      "  if utilization >= credit_table.credit_threshold:",
      "    print( 'Sending utilization alert')",
      "    sns_client = boto3.client( 'sns' )",
      "",  
      "    response = sns_client.publish(",
      "      TopicArn = credit_table.credit_notification_topic,",
      "      Subject = 'AWS Account Credits Utilization Alert.  Pease see information below...',",
      "      Message = 'Account ID: ' + account_id + ", 
      "        \"'\\n\\nCredits remaining: '\" + str( credit_remaining ) +",
      "        \"'\\n\\nExpiration Date: '\" + credit_table.credit_expiry",
      "    )",
      "  print( 'Utilization : ' + str( utilization ) )",
      "",    
      "  return {",
      "    'utilization': utilization,",
      "    'credit_remainning' : credit_remaining",
      "  }"
                    ]]}
        }
      }
    },
    "CreditTrackingLambdaEventPermission": {
  "Type": "AWS::Lambda::Permission",
  "Properties": {
      "Action": "lambda:InvokeFunction",
      "FunctionName": "aws-account-credits-tracking",
      "Principal": "events.amazonaws.com",
      "SourceArn": 
      {
        "Fn::GetAtt": [
          "CreditThresholdLambdaTimedTriggerEvent",
          "Arn"
      ]
      }   
  }
    },
    "CreditThresholdLambdaTimedTriggerEvent": {
      "Type": "AWS::Events::Rule",
      "Properties": {
          "Description": "Event that triggers the credit threshold Lambda function",
          "Name": "aws-account-credits-tracking-trigger",
          "ScheduleExpression": { "Ref" : "LambdaEventTriggerCron" },
          "State": "ENABLED",
          "Targets": [
              {
                  "Arn": "arn:aws:lambda:us-east-1:675556681054:function:aws-account-credits-tracking",
                  "Id": "CreditThresholdLambdaFunction"
              }
          ]
      }
    }
  }
}
